You are planning a delivery route through a number of cities for a big company. Your origin is near the Existential Typography Clinic of Wisconsin (code ETCW), meaning that you are to design a tour that starts and ends with this location and goes through all the cities on the route at least once. Your goal is to minimize the overall cost of the tour.
More formally, the file map.txt (attached) lists the cost (in dollars) of traveling between roughly 1500 destination cities (marked by four-letter abbreviations). This cost is based primarily on mileage between cities, but includes the price of fuel and the like. For example, one entry in the file reads ETCW --> RJWT: 807, indicating that travel from ETCW to the RJWT costs $807. You are to find a cycle on this graph that goes through each vertex at least once and has minimum weight (i.e., the sum of the weights of all edges in the cycle), but that starts and ends at ETCW.
All your code for reading and interpreting the graph should be completed in C++, and you should attach them to your solution together with a short explanation of your approach. You will also upload your best cycle to the course web page, in the form of a file with one vertex name per line denoting the vertices of your cycle.
The smallest weight cycle found will result in 0.2 points of extra credit and the next four smallest cycles will result in 0.1 points of extra credit (ties broken arbitrarily). You do not have to find the very shortest cycle in the graph (which may be very computationally intensive) to get full credit, but you do have to find a “reasonably short” cycle.